#!/usr/bin/python

import numpy as np
import itertools as it

import group

def main():
    prefs = [[0.,0.,0.], [0.,0.,1.], [1.,1.,0.], [1.,1.,1.]]
    #prefs = np.asarray(prefs)
    p2max = 4
    groups = []

    # initialize groups
    S = 1./np.sqrt(2.)
    U3 = np.asarray([[S,0,S],[0,1,0],[S,0,-S]])
    U2 = np.asarray([[S,S],[1.j*S,-1.j*S]])
    for p2 in range(p2max):
        try:
            _g = group.TOh.read(p2=p2)
            if not np.allclose(_g.U3, U3) or not np.allclose(_g.U2, U2):
                raise IOError("redo computation")
        except IOError:
            _g = group.TOh(pref=prefs[p2], irreps=True, U3=U3, U2=U2)
            _g.save()
        groups.append(_g)
        #print("p^2 = %d" % p2)
        #print(_g.irrepsname)

    # calc coefficients
    print(" CMF ".center(40, "="))
    irnames = groups[0].irrepsname
    for p in range(p2max):
        print(" %d x %d -> 0 ".center(40, "+") % (p, p))
        try:
            cgs = group.TOhCG(0, p, p, groups)
            #cgs = group.TOhCG(0, p, p, groups, ir1="A2g", ir2="T2g")
            #cgs.display()
            #cgs.print_operators()
            for ir in irnames:
                a, b, c = cgs.get_pion_cg(ir)
                if b is not None:
                    print(ir)
                    group.cg_to_pandas(b,c)
                    #group.display(b, c)
        except RuntimeError:
            continue
    return

    print(" MF1 ".center(40, "="))
    irnames = groups[1].irrepsname
    for i, j in it.product(range(p2max), repeat=2):
        if i == 0 or j == 0:
            empty = 3
        else:
            empty = 4
        try:
            cgs = group.TOhCG(1, i, j, groups)
            if cgs is None:
                continue
            print(" %d x %d -> 1 ".center(40, "+") % (i, j))
            #cgs.display(emptyline = empty)
            cgs.print_operators()
            #for ir in irnames:
            #    a, b, c = cgs.get_pion_cg(ir)
            #    if b is not None:
            #        print(ir)
            #        group.display(b, c, empty=empty)
        except RuntimeError:
            continue

    print(" MF2 ".center(40, "="))
    irnames = groups[2].irrepsname
    for i, j in it.product(range(p2max), repeat=2):
        try:
            cgs = group.TOhCG(2, i, j, groups)
            if cgs is None:
                continue
            print(" %d x %d -> 2 ".center(40, "+") % (i, j))
            #cgs.display(emptyline = empty)
            cgs.print_operators()
            #for ir in irnames:
            #    a, b, c = cgs.get_pion_cg(ir)
            #    if b is not None:
            #        print(ir)
            #        group.display(b, c, empty=empty)
        except RuntimeError:
            continue

    print(" MF3 ".center(40, "="))
    irnames = groups[3].irrepsname
    for i, j in it.product(range(p2max), repeat=2):
        try:
            cgs = group.TOhCG(3, i, j, groups)
            if cgs is None:
                continue
            print(" %d x %d -> 3 ".center(40, "+") % (i, j))
            #cgs.display(emptyline = empty)
            cgs.print_operators()
            #for ir in irnames:
            #    a, b, c = cgs.get_pion_cg(ir)
            #    if b is not None:
            #        print(ir)
            #        group.display(b, c, empty=empty)
        except RuntimeError:
            continue

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
